---
title: "Skeleton Document with Data"
author: "Michael Moroz"
format: html
editor: visual
---

## The Skeleton Repo

#### Disclaimer

A repository and its corresponding R-project have been created to **complete** the 'skeleton' repository mini-project. Embedded within this R-project, I have decided to make my *own* questions that I will answer to demonstrate other relevant skills from the objective list. Making and answering these questions will allow me to make further commitments to the repository, allowing for clean and easy comprehension of my code.

#### Question #1

William is a student at the University of Chicago. William just finished taking three classes during the fall quarter, and needs help calculating and visualizing his GPA. The University of Chicago uses a standard A-grade conversion scale, where an 'A' equals a 4.00 GPA. William's classes and grades are as follows:

**Causal Inference**: A- **Introduction to Python Programming**: B **From Data to Manuscript in R**: B+

1.  Make a data frame with William's class, grade and quarter information.
2.  Convert William's letter grades to a numeric GPA using the standard A-grade conversion scale.
3.  Add William's letter grades as a column to the data frame.
4.  Calculate William's fall quarter GPA.

```{r question-1}

#| label: question-1

## install.packages("tidyverse")
library(tidyverse)

## Making the data frame

william <- data.frame(Class = c("Causal Inference", "Introduction to Python Programming", "From Data to Manuscript in R"), Letter = c("A-", "B", "B+"), Quarter = c("Fall", "Fall", "Fall"))

william <- william %>%
  mutate(Numeric = case_when(Letter == "A" ~ 4.00, Letter == "A-" ~ 3.70, Letter == "B+" ~ 3.30, Letter == "B" ~ 3.00, Letter == "B-" ~ 2.70, Letter == "C+" ~ 2.30, Letter == "C" ~ 2.00, Letter == "C-" ~ 1.70, Letter == "D+" ~ 1.30, Letter == "D" ~ 1.00, Letter == "F" ~ 0.00))

## Moving Quarter after Class so it looks better aesthetically.

william <- william %>% relocate(Quarter, .after = Class)

## Calculating William's GPA

william_gpa = mean(william$Numeric)

## Rounding GPA to two decimals

william_gpa = round(william_gpa, 2)

## All of the questions have been answered, and everything looks good. Now I'm going to do some simple checks to make sure the numeric calculations went properly using arithmetic, comparison and logical operators. 

larger_test = william$Numeric[1] >= william_gpa

equal_test = william_gpa|((william$Numeric[1] + william$Numeric[2] + william$Numeric[3]) / 3)

## Everything was done properly! Going to commit to the skeleton repository, then move to Question #2

head(william)
print(william_gpa)
print(equal_test)

```

#### Question #2

Write the newly created data frame to a csv.

```{r question-2}

#| label: question-2

## I will convert the table to a csv using the readr package.

library(readr)

write_csv(william, "Tables/william.csv")

## Now this should have saved properly using a relative path in my 'Skeleton' folder.

## Calling it now.

will_data = read_csv("Tables/william.csv")

```

#### Question #3

Ten years after graduation, William is currently unhappy in his job as a bank manager due to his monetary compensation. William believes he can make more money as a lawyer, but is unsure whether he should apply to law school. Some of his friends, Jonathan, Martin, Olivia, Isabella, Daniel, and Paige, are lawyers and graduated from law school. Some of his other friends, Matthew, and Connor, never went to law school and are perfectly happy in their careers. Information about William and his friends are as follows:

-   William had a `r william_gpa` GPA, scored 167 on the LSAT, and participated in 2 extracurricular activities. He currently makes \$63,002 as a bank manager.
-   Jonathan had a 3.95 GPA, scored 176 on the LSAT, and participated in 5 extracurricular activities. He currently makes \$155,387 as a lawyer.
-   Martin had a 3.63 GPA, scored 170 on the LSAT, and participated in 2 extracurricular activities. He currently makes \$122,098 as a lawyer.
-   Olivia had a 3.99 GPA, scored 179 on the LSAT, and participated in 0 extracurricular activities. She currently makes \$113,000 as a lawyer.
-   Isabella had a 3.54 GPA, scored 168 on the LSAT, and participated in 3 extracurricular activities. She currently makes \$105,000 as a lawyer.
-   Daniel had a 3.77 GPA, score 171 on the LSAT, and participated in 4 extracurricular activities. He currently makes \$118,220 as a lawyer.
-   Paige had a 3.81 GPA, scored 175 on the LSAT, and participated in 2 extracurricular activities. She currently makes \$94,562 as a lawyer.
-   Matthew had a 3.13 GPA, scored 154 on the LSAT, and participated in 3 extracurricular activities. He currently makes \$76,000 as a supermarket manager.
-   Connor had a 3.31 GPA, scored 162 on the LSAT, and participated in 5 extracurricular activities. He currently makes \$58,020 as a mortgage analyst.

1.  Make a data frame including each person's name, GPA, LSAT, extracurricular activity participation, salary and law school status as columns.
2.  Run a regression to determine whether there are any significant predictors of salary.
3.  Plot your desired model and impose a line of best fit.
4.  Write up the results of your regression analysis.

```{r question-3}

#| label: question-3

## install.packages("ggplot2")
library(ggplot2)

admissions_data <- data.frame(Name = c("William", "Jonathan", "Martin", "Olivia", "Isabella", "Daniel", "Paige", "Matthew", "Connor"), GPA = c(william_gpa, 3.95, 3.63, 3.99, 3.54, 3.77, 3.81, 3.13, 3.31), LSAT = c(167, 176, 170, 179, 168, 171, 175, 154, 162), Extras = c(2, 5, 2, 0, 3, 4, 2, 3, 5), Salary = c(63002, 155387, 122098, 113000, 105000, 118220, 94562, 76000, 58020), School = c(0, 1, 1, 1, 1, 1, 1, 0, 0))

write_csv(admissions_data, "Tables/admissions_data.csv")

## The data frame has been created with everyone's information. School is coded as a yes/no variable, with 0 meaning the person is not a lawyer, and 1 meaning the person is.  

## Now I will run a linear regression to identify significant indicators of salary.
## Hypothesis: Law school status, but not the other predictors, will be a significant predictor of salary. 
## Code reference: https://www.datacamp.com/tutorial/linear-regression-R 

lmSalary = lm(Salary ~ GPA + LSAT + Extras + School, data = admissions_data)
# summary(lmSalary)

## None of my predictors are significant in the full model, nor is the full model itself at p < .05. I will make some modifications to see whether I can uncover some of the variance. 

lmSalary2 = lm(Salary ~ GPA + LSAT + School, data = admissions_data)
# summary(lmSalary2)

## Now the model is significant, but none of my predictors are. I will try dropping LSAT score.

lmSalary3 = lm(Salary ~ GPA + School, data = admissions_data)
# summary(lmSalary3)

## To see the final model, I will drop GPA. 

lmSalary4 = lm(Salary ~ School, data = admissions_data)
summary(lmSalary4)

## So now we see that attending law school is a significant predictor of earning a higher salary in my hypothetical data set. Time to plot the data!

## Plotting
## Code reference: https://www.geeksforgeeks.org/add-regression-line-to-ggplot2-plot-in-r/ 

ggplot(admissions_data, aes(x = School, y = Salary)) + geom_point(color = "red") + stat_smooth(method = "lm", formula = y ~ x, geom = "smooth") + labs(x = "Attended Law School (0 = No)", y = "Salary (USD)", title = "Figure 1: Predicting Salary from Law School Status **")

## Summary statistics

summary(admissions_data$GPA)
summary(admissions_data$LSAT)
summary(admissions_data$Extras)
summary(admissions_data$Salary)
summary(admissions_data$School)

```

Regression analyses were conducted on current and former University of Chicago students (n = 9) to investigate the effectiveness of predicting salary (*M* = 100,587, *SD* = 31,256) using measures of GPA (*M* = 3.61, *SD* = 0.30), LSAT score (*M* = 169.11, *SD* = 7.66), number of extracurricular activities (*M* = 2.89, *SD* = 1.62) and law school attendance (attended = 6, non-attended = 3). The model did not significantly account for variance of salary in the data, R^2^ = .82, *F*(4, 4) = 4.46, p = .088. Since neither of GPA, LSAT score, number of extracurricular activities, or law school attendance accounted for significant variance in salary when all compiled in the model, additional analyses were tested measuring the efficacy of each individual predictor. When tested in a singular model, law school attendance accounted for 70% of the variance in salary in the data, R^2^ = .70, *F*(1, 7) = 16.48, p \< .01.

The estimate of the coefficient for law school attendance was *b* = 52,370, *s~b~* = 12,902, *t*(7) = 4.06, *p* = .004. This indicates that going to law school is associated with a \$52,370 jump in salary as opposed to not having gone to law school. Based on data from this data set, our main hypothesis is supported in that William would greatly increase his earning potential by attending law school and becoming a lawyer.

#### Question #4

William has three other friends that are medical doctors. Their information are as follows:

-   Tyrell had a 3.91 GPA, never took the LSAT, and participated in 5 extracurricular activities. He currently makes \$388,267 as a cardiologist.
-   Savannah had a 3.85 GPA, never took the LSAT, and participated in 4 extracurricular activities. She currently makes \$422,001 as an oncologist.
-   Gerald had a 3.89 GPA, never took the LSAT, and participated in 3 extracurricular activities. He currently makes \$543,022 as a dermatologist.

1.  Add William's doctor friends to the data frame.
2.  Perform an ANOVA to determine whether there are differences in salary between lawyers, doctors, and non-lawyers or non-doctors.
3.  Plot the results.

```{r question-4}

#| label: question-4

## Now I need to modify my data set so it accurately reflects the updated information. 
## I will code the new friends as "2" in the School column to reflect their status as attended medical school, and NA in the LSAT column to reflect that they never took the LSAT.

admissions_data = tibble(admissions_data)

doctor_rows = data.frame(Name = c("Tyrell", "Savannah", "Gerald"), GPA = c(3.91, 3.85, 3.89), LSAT = c(NA, NA, NA), Extras = c(5, 4, 3), Salary = c(388267, 422001, 543022), School = c(2, 2, 2))

admissions_data = admissions_data %>%
  rbind(doctor_rows)

## Performing the ANOVA
## Hypothesis: There are significant differences between groups on salary.
## Code reference: https://www.scribbr.com/statistics/anova-in-r/ and https://stackoverflow.com/questions/31443521/modifying-y-axis-with-ggplot2 

anova = aov(Salary ~ School, data = admissions_data)
summary(anova)

## There are statistically significant differences between lawyers, doctors, and non-lawyers or non-doctors on salary in this hypothetical data set. 

## Plotting the results
## Using the scales package because it allows me to change x and y axis ticks quite efficiently.

library(scales)

ggplot(admissions_data, aes(x = School, y = Salary)) + geom_point() + labs(x = "School Type (0 = Other, 1 = Law, 2 = Medical)", y = "Salary (USD)", title = "Figure 2: Salary from School Type") + stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.2) + scale_y_continuous(labels=comma) + scale_x_continuous(breaks = unique(admissions_data$School))

```

#### Question #5

Use a code chunk and R-Markdown to demonstrate in-line code, lists, and footnotes in Markdown.

```{r question-5}

#| label: question-5

## Making a list that I can read in R Markdown

## I'm going to make a simple list that includes my name and my dog's name.

mikes_list = list("Michael", "Douglas")

## Making a variable with my dog's age (5 years old).

dog_age = (5)

## Making a new variable about how long I've had my dog.

ownership = (dog_age - 1)

## Making a string variable with my dog's birthplace.

birthplace = "Phoenix, Arizona"

## Making a list of locations I have lived prior to moving to Chicago.
## Technically Edmonton is not totally correct but it's the nearest city, so I will use that here.

lived_locations = list("Phoenix", "Minneapolis", "Edmonton")

## Finally, making a string variable that lists where I currently live. 

current_location = "Chicago"

```

My name is **`r mikes_list[1]`** and I have a dog named *`r mikes_list[2]`*. `r mikes_list[2]` just turned `r dog_age` and I adopted him `r ownership` years ago. `r mikes_list[2]` is originally from `r birthplace` and he is the absolute best! Interestingly, `r mikes_list[2]` is not the only one who is well-traveled. I have lived in `r lived_locations[1:2]` and `r lived_locations[3]`[^1] prior to moving to `r current_location`!

[^1]: Edmonton, Alberta, is a city in Canada.

#### Question #6

Make a mathematical function that calculates GPA with any desired input.

```{r question-6}

#| label: question-6

## Making the function
## Ok so I'm going to make a function where you have to input someone's name, the quarter they just completed, and the numeric grades of their three classes. It will take the average of those three classes and produce it in a paste statement. 
## Code reference: https://www.geeksforgeeks.org/types-of-functions-in-r-programming/ 

gpa_calculator = function(name, quarter, class1, class2, class3) {
  paste(name, "had a", round(((class1 + class2+ class3)/3), 2), "GPA during the", quarter, "quarter")
}

## Checking the efficacy of my function using my fictional "William" data earlier. 

gpa_calculator("William", "Fall", 3.3, 3.0, 3.7)

## Testing the function with other input. 

gpa_calculator("Diana", "Winter", 4.0, 3.3, 3.7)

## Everything appears to have worked out. 

```

#### Question #7

Practice your loop skills by using multiple loops in the same chunk of code.

```{r question-7}

#| label: question-7

## So I used a case_when() statement in a dplyr pipeline earlier, but now I want to try combining loops to see if I can get it to work. 
## I'm going to do something pretty simple and use while and for loops to count my age backwards. Then before it reaches 0, I will have it list the year I was born.  
## Code reference: https://www.w3schools.com/r/r_while_loop.asp 

mikes_age = 22
start_year = 2024

while (mikes_age > 1) {
  mikes_age = mikes_age - 1
  start_year = start_year - 1
  print(paste("Michael used to be", mikes_age, "in", start_year))
  if (mikes_age == 1) {
    print(paste("Michael was born in 2002"))
  }
}

## Everything appears to have worked out! 

```



